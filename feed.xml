<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Evan Hackett</title>
    <description>My blog. Mainly Computer Science stuff.</description>
    <link>http://evanhackett.com</link>
    <atom:link href="http://evanhackett.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Normal Order vs. Applicative Order Languages</title>
        
        
          <description>&lt;p&gt;Often times when evaluating programming languages, we consider things such as syntax, type checking rules, abstraction constructs, idioms, available tooling, etc. Indeed these are all important things to consider, but today I am going to talk about an often overlooked aspect of a language: the evaluation strategy.&lt;/p&gt;

</description>
        
        <pubDate>Tue, 04 Oct 2016 16:31:18 -0700</pubDate>
        <link>http://evanhackett.com/2016/evaluation-strategies/</link>
        <guid isPermaLink="true">http://evanhackett.com/2016/evaluation-strategies/</guid>
      </item>
    
      <item>
        <title>Hashing Passwords with bcrypt and Storing Them with Bookshelf.js Using Promises</title>
        
        
          <description>&lt;p&gt;I recently ran into some issues trying to store passwords using the bookshelf ORM after asynchronously hashing them with bcrypt. I’m writing this post to potentially help others who might have this issue in the future, but also so I have a link for myself to refer to in case I ever have this issue again.&lt;/p&gt;

</description>
        
        <pubDate>Tue, 15 Sep 2015 11:53:18 -0700</pubDate>
        <link>http://evanhackett.com/2015/hashing-passwords-with-bcrypt-and-bookshelf/</link>
        <guid isPermaLink="true">http://evanhackett.com/2015/hashing-passwords-with-bcrypt-and-bookshelf/</guid>
      </item>
    
      <item>
        <title>Generating the Mandelbrot Set with Javascript - Part 2</title>
        
        
          <description>&lt;p&gt;Welcome to part 2 of “Generating the Mandelbrot Set with Javascript”. In &lt;a href=&quot;/2015/generating-the-mandelbrot-set-with-javascript-part-1/&quot;&gt;part 1&lt;/a&gt; we learned about the Mandelbrot set equation, and what it’s pieces are. We learned about sets, the complex plane, and complex numbers. We still have a few math concepts to understand before we can fully comprehend what the Mandelbrot set actually is. After that, we will generate the graph using javascript and an HTML canvas!&lt;!--more--&gt;&lt;/p&gt;

</description>
        
        <pubDate>Fri, 03 Jul 2015 11:47:00 -0700</pubDate>
        <link>http://evanhackett.com/2015/generating-the-mandelbrot-set-with-javascript-part-2/</link>
        <guid isPermaLink="true">http://evanhackett.com/2015/generating-the-mandelbrot-set-with-javascript-part-2/</guid>
      </item>
    
      <item>
        <title>Generating the Mandelbrot Set with Javascript - Part 1</title>
        
        
          <description>&lt;p&gt;Have you ever wondered how some of those amazing fractal images are created? Through a series of blog posts, I’m going to explain how to create amazing pictures using the Mandelbrot set. I will be using the javascript programming language, but any language will do as long as you have a way to draw pixels to a canvas. In this post, part 1, I will be going over prerequisite material needed to understand the Mandelbrot set.&lt;/p&gt;

</description>
        
        <pubDate>Sat, 30 May 2015 06:52:00 -0700</pubDate>
        <link>http://evanhackett.com/2015/generating-the-mandelbrot-set-with-javascript-part-1/</link>
        <guid isPermaLink="true">http://evanhackett.com/2015/generating-the-mandelbrot-set-with-javascript-part-1/</guid>
      </item>
    
  </channel>
</rss>